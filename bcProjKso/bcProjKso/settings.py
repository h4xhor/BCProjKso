"""
Django settings for bcProjKso project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import datetime

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '[secret]'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Set True in production
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False

CSRF_USE_SESSIONS = True

ALLOWED_HOSTS = [ '127.0.0.1', 
                  '8t86re13ai.execute-api.ap-southeast-2.amazonaws.com',
                  'localhost' ]


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'genRisks.apps.GenrisksConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',

    # db backed session
    'django.contrib.sessions',

    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',

# to prevent "Forbidden (CSRF cookie not set.)" errors
#    'django.middleware.csrf.CsrfViewMiddleware',

    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'bcProjKso.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bcProjKso.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# aws lambda
DATABASES = {
  'default': {
      'ENGINE': 'django.db.backends.mysql',
      'NAME': '[db_name]',
      'USER': '[db_user]',
      'PASSWORD': '[db_password]',
      'HOST': '[db_host]',
      'PORT': '[db_port]'
  }
}

##localhost
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'genRiskdb',
        'HOST': 'localhost',
        'PORT': '3306',
        'USER': 'x',
        'PASSWORD': 'pass',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

# For JWT
REST_FRAMEWORK = {
#    'DEFAULT_PERMISSION_CLASSES': (
#        'rest_framework.permissions.IsAuthenticated',
#    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_EXPIRATION_DELTA': datetime.timedelta(hours=2),
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
}
